#!/bin/sh
# This script will help set up Kubernetes using Kubeadm In AWS EC2 Ubuntu Servers
# You will need a minimum of 3 servers (1 manager and 2 workers)
# The manager will require t2.medium, while the workers will require a minimum of 2GB RAM
# You will need to open certain required ports. For our exercise, we will open "all trafic".

# Update the apt package index and install packages needed to use the Kubernetes apt repository
sudo apt-get update -y
sudo apt-get install -y ca-certificates curl

# Download the Google Cloud public signing key
sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg

# Add the Kubernetes apt repository
echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list

# Turn off Swap Space
sudo swapoff -a
sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

# Install kubeadm, kubelet, and kubectl
sudo apt-get update -y
sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl

# Setup containerd
sudo cat <<EOF | sudo tee /etc/modules-load.d/containerd.conf
overlay
br_netfilter
EOF

sudo modprobe overlay
sudo modprobe br_netfilter

# Setup required sysctl params, these persist across reboots.
sudo cat <<EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf
net.bridge.bridge-nf-call-iptables  = 1
net.ipv4.ip_forward                 = 1
net.bridge.bridge-nf-call-ip6tables = 1
EOF

# Apply sysctl params without reboot
sudo sysctl --system

#Install and configure containerd 
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
sudo apt update -y
sudo apt install -y containerd.io
sudo mkdir -p /etc/containerd
sudo containerd config default | sudo tee /etc/containerd/config.toml

#Start containerd
echo "Restarting containerd..." 
sudo systemctl restart containerd
echo "Enabling containerd..."
sudo systemctl enable containerd

# Enable and start kubelet service
echo "Reloading kubelet daemon..."
sudo systemctl daemon-reload
echo "Starting kubelet..."
sudo systemctl start kubelet
echo "Enabling the kubelet service..."
sudo systemctl enable kubelet.service

<<TheseWillApplyOnlyToTheManagerNode
# Fetch images before cluster initialization
sudo kubeadm config images pull

# Initialize Kubernetes manager in the manager node
sudo kubeadm init   --pod-network-cidr=10.244.0.0/16

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

# To verify whether kubectl is working or not, run the following command:
kubectl get pods -o wide --all-namespaces

#From the foregoing, all but ‘coredns’ pod should be running. To resolve this, install a weave pod network.
kubectl apply -f https://github.com/weaveworks/weave/releases/download/v2.8.1/weave-daemonset-k8s.yaml

kubectl get nodes
kubectl get pods --all-namespaces

# Get token
kubeadm token create --print-join-command

TheseWillApplyOnlyToTheManagerNode


### Note for Next Steps
#1. To add worker nodes to the manager node, copy the kubeadm join token from the manager node and execute (using sudo) in all the worker nodes to create a cluster
#2. kubectl commands have to be executed in manager node/controller plane.
#3. To check nodes, run "kubectl get nodes"
#4. To deploy a sample application. run "kubectl run nginx-demo --image=nginx --port=80"
#5. To create a Service object that exposes the pod, run "kubectl expose pod nginx-demo --port=80 --type=NodePort"
#6. To list all services in the namespace or to get Node Port details, run "kubectl get services"
